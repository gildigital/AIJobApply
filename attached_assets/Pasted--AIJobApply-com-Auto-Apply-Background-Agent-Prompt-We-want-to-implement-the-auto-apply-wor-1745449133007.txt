# 🚀 AIJobApply.com: Auto-Apply Background Agent Prompt

We want to implement the **auto-apply workflow** for AIJobApply.com — an AI-powered job application platform.

When a user clicks the “Start Auto-Applying” button, the platform should begin applying to jobs in the background and automatically record applied jobs into the existing **Job Tracker**.

---

## ✅ 1. Background Job Architecture

- Implement a function called `startAutoApply(userId)` that:
  - Runs as a background worker (can use a Node worker thread, cron-style job, or async queue)
  - Accepts a `userId` and:
    - Loads their resume + profile
    - Checks their subscription plan
    - Ensures daily apply limits haven’t been exceeded

---

## ✅ 2. Job Scraping Logic

- Create a placeholder function `getJobListingsForUser(user)` that returns an array of jobs with:
  - `jobTitle`
  - `company`
  - `description`
  - `applyUrl`

- These should be mock jobs for now. We will replace them with a scraper later (RemoteOK API, LinkedIn, etc).

---

## ✅ 3. Matching Logic

- Implement a placeholder function `scoreJobFit(user, job)` using OpenAI (or stub it) that returns a value from 0–100.
- In `startAutoApply`, only proceed if `score > 70`.

---

## ✅ 4. Auto-Apply Simulation

- Simulate application submission using a `submitApplication(user, job)` function.
- After successful "application":
  - Save the job into the `jobTracker` table using a helper function `addJobToTracker(userId, job)`.

### `addJobToTracker` should:
- Store:
  - `userId`
  - `title`
  - `company`
  - `url`
  - `status = "Applied"`
  - `appliedAt = new Date()`
- Respect daily application limits based on subscription plan

---

## ✅ 5. Logging + Progress UI

- Save progress to a new table: `autoApplyLogs`
  - Fields: `userId`, `jobId`, `status`, `timestamp`
- Create a lightweight API route `/api/auto-apply/status` that returns the user’s current progress

- On frontend, poll this endpoint to show users their auto-apply progress:
  - e.g. “Applied to 6/20 jobs today…”

---

## 🧠 Bonus Enhancements

- Ensure duplicate job applications are avoided
- Add support for plan throttling using: `user.plan.dailyLimit`
- Add cooldown if needed between submissions

---

## 📌 Tech Context

- Database: PostgreSQL (via Prisma or similar)
- Frontend: React + TailwindCSS
- Auth: Already implemented
- Stripe: Already integrated with `stripe_subscription_id`, plans, and daily limits
- Resume parsing + tailoring logic is coming later

---

## 🎯 Outcome

This job agent will run in the background, respect user plans, simulate applying to jobs, and **record all activity directly into the Job Tracker** — completing the full SaaS experience.

Please implement this system in a clean, modular, async-friendly way so it can scale to real scraping agents later.
