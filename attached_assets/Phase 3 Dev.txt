# 🤖 AIJobApply Phase 3: Auto-Apply Per Source + Job Tracker UX Polish

We’ve completed job scraping + AI match scoring. Now we want to begin automating the **application submission process** based on the job source, and improve the **Job Tracker UI** to reflect real-time status.

---

## ✅ 1. Source-Based Application Submission

Create a main service function:

```ts
export async function submitApplication(user: User, job: JobListing): Promise<"success" | "skipped" | "error">

This should:

Switch on job.source

Call the appropriate method:

switch (job.source) {
  case "adzuna":
    return await submitAdzunaApplication(user, job);
  case "linkedin":
    return await submitLinkedInApplication(user, job);
  default:
    return "skipped";
}

Each method should simulate application for now (e.g. log, sleep, return success)

✅ 2. Update Job Tracker Schema
Ensure these fields exist:

source: string
applicationStatus: 'pending' | 'applied' | 'skipped' | 'failed'
submittedAt?: Date

Update this when an application is attempted.

✅ 3. Job Tracker UI Enhancements
In the frontend tracker:

Add badges for source (e.g. Adzuna, LinkedIn)

Show a visual status indicator: 🟡 Pending → ✅ Applied → 🔴 Failed

Add a “Resubmit” button for failed apps

Filter bar:

Match Score: slider or ≥ threshold

Application status: tabs or dropdown

Source filter: pills or select

Use TailwindCSS or shadcn/ui for styling.

📝 Notes
No real browser automation yet — just simulate for now

Later we’ll connect Playwright for LinkedIn/Indeed auto-filling

Application logs already exist in autoApplyLogs

🎯 Outcome
Jobs with high match scores are automatically applied to depending on source, and users see the status visually update in the tracker — making the experience feel alive and intelligent.

Please implement both the backend agent logic and frontend polish together.

